
@node Extensions
@chapter Extensions

@menu
* Text editor substrate::
* Fonts and Extended Text Styles::
* Tab Layout::
* Raster Images::
* Text Formatting::
@end menu

@node Text editor substrate
@section Text editor substrate
@cindex drei
@cindex input-editor
@cindex text-editor
@cindex text-field

For brievity only basic topics common to all substrates are covered in
the manual. Drei documentation is provided as a separate document.

@menu
* Text field gadget::
* Text editor pane::
@end menu

@node Text field gadget
@node Text editor pane

@node Tab Layout
@section Tab Layout

The tab layout is a composite pane arranging its children so that
exactly one child is visible at any time, with a row of buttons
allowing the user to choose between them.

See also the tabdemo.lisp example code located under Examples/ in the
McCLIM distribution.  It can be started using demodemo.

@include class-clim-tab-layout-tab-layout.texi
@include class-clim-tab-layout-tab-layout-pane.texi
@include class-clim-tab-layout-tab-page.texi
@include macro-clim-tab-layout-with-tab-layout.texi

@include fun-clim-tab-layout-tab-layout-pages.texi

@include fun-clim-tab-layout-tab-page-tab-layout.texi
@include fun-clim-tab-layout-tab-page-title.texi
@include fun-clim-tab-layout-tab-page-pane.texi
@include fun-clim-tab-layout-tab-page-presentation-type.texi
@include fun-clim-tab-layout-tab-page-drawing-options.texi

@include fun-clim-tab-layout-add-page.texi
@include fun-clim-tab-layout-remove-page.texi
@include fun-clim-tab-layout-tab-layout-enabled-page.texi
@include fun-clim-tab-layout-sheet-to-page.texi
@include fun-clim-tab-layout-find-tab-page-named.texi
@include fun-clim-tab-layout-switch-to-page.texi
@include fun-clim-tab-layout-remove-page-named.texi

@include fun-clim-tab-layout-note-tab-page-changed.texi

@c com-switch-to-tab-page
@c com-remove-tab-page

@node Fonts and Extended Text Styles
@section Fonts and Extended Text Styles

@menu
* Extended Text Styles::
* Listing Fonts::
@end menu

@node Extended Text Styles
@subsection Extended Text Styles

McCLIM extends the legal values for the @cl{family} and @cl{face}
arguments to @cl{make-text-style} to include strings (in additional to
the portable keyword symbols), as permitted by the CLIM spec, section
11.1.

Each backend defines its own specific syntax for these family and face
names.

The CLX backend maps the text style family to the X font's
@emph{foundry} and @emph{family} values, separated by a dash.  The
face is mapped to @emph{weight} and @emph{slant} in the same way.  For
example, the following form creates a text style for
@emph{-misc-fixed-bold-r-*-*-18-*-*-*-*-*-*-*}:

@lisp
(make-text-style "misc-fixed" "bold-r" 18)
@end lisp

In the GTK backend, the text style family and face are used directly
as the Pango font family and face name.  Please refer to Pango
documentation for details on the syntax of face names.  Example:

@lisp
(make-text-style "Bitstream Vera Sans" "Bold Oblique" 54)
@end lisp

@node Listing Fonts
@subsection Listing Fonts

McCLIM's font listing functions allow applications to list all
available fonts available on a @class{port} and create text style
instances for them.

Example:

@lisp
* (find "Bitstream Vera Sans Mono"
        (clim-extensions:port-all-font-families (clim:find-port))
        :key #'clim-extensions:font-family-name
        :test #'equal)
#<CLIM-GTKAIRO::PANGO-FONT-FAMILY Bitstream Vera Sans Mono>

* (clim-extensions:font-family-all-faces *)
(#<CLIM-GTKAIRO::PANGO-FONT-FACE Bitstream Vera Sans Mono, Bold>
 #<CLIM-GTKAIRO::PANGO-FONT-FACE Bitstream Vera Sans Mono, Bold Oblique>
 #<CLIM-GTKAIRO::PANGO-FONT-FACE Bitstream Vera Sans Mono, Oblique>
 #<CLIM-GTKAIRO::PANGO-FONT-FACE Bitstream Vera Sans Mono, Roman>)

* (clim-extensions:font-face-scalable-p (car *))
T

* (clim-extensions:font-face-text-style (car **) 50)
#<CLIM:STANDARD-TEXT-STYLE "Bitstream Vera Sans Mono" "Bold" 50>
@end lisp

@include class-clim-extensions-font-family.texi
@include class-clim-extensions-font-face.texi

@include fun-clim-extensions-port-all-font-families.texi

@include fun-clim-extensions-font-family-name.texi
@include fun-clim-extensions-font-family-port.texi
@include fun-clim-extensions-font-family-all-faces.texi

@include fun-clim-extensions-font-face-name.texi
@include fun-clim-extensions-font-face-family.texi
@include fun-clim-extensions-font-face-all-sizes.texi
@include fun-clim-extensions-font-face-text-style.texi

@node Raster Images
@section Raster Images

This extension has the goal to provide a fast and flexible way to
display images in the screen. An image is a rectangular object and is
represented as a rectangular pattern and follows pattern
protocol. Pixel values are represented as 32-bit RGBA numbers.

collapse-pattern
make-pattern-from-bitmap-file

define-bitmap-file-reader
define-bitmap-file-writer
bitmap-format-supported-p
bitmap-output-supported-p
read-bitmap-file
write-bitmap-file

Images are read with @code{read-bitmap-file}.
Images are wrote with @code{write-bitmap-file}.

Images are created with @code{make-image}.
Images are cloned with @code{clone-image}.
Images are copied with @code{copy-image}.
Images are blended with @code{blend-image}.
Images are filled with @code{fill-image}.

Operations having source and destination image as arguments may use
the same image without copying it.

To draw an image use @code{draw-pattern*} or @code{draw-design}. Image
may be also used as an ink in other drawing functions.

@section Raster image as a medium

Raster image backend includes a medium that implements:
@itemize @bullet
@item CLIM's medium protocol,
@item CLIM's output stream protocol, and
@item CLIM's Pixmap protocol.
@end itemize

@anchor{Macro clime:with-output-to-image-stream}
@deffn {Macro} {clime:with-output-to-image-stream} (stream-var file-stream format &rest options) &body body
@findex clime:with-output-to-raster-image-stream
@end deffn

@anchor{Macro clime:with-output-to-rgba-pattern}
@deffn {Macro} {clime:with-output-to-rgba-pattern} (stream-var image &rest options) &body body
@findex clime:with-output-to-rgba-pattern
@end deffn

Within @code{body}, @code{stream-var} is bound to a stream that produces
a raster image.  This stream is suitable as a stream or medium argument
to any CLIM output utility, such as @code{draw-line*} or
@code{write-string}.

The value of @code{options} is a list consisting of alternating keyword and value
pairs.  These are the supported keywords:
@itemize @bullet
@item
  @code{:width} --- specifies the width of the image. Its default value is 1000.
@item
  @code{:height} --- specifies the height of the image. Its default value is 1000.
@end itemize

@defmac {clime:with-output-to-raster-image-stream}
An image describing the output to the @code{stream-var} stream will be
written to the stream @code{file-stream} using the format
@code{format}. @code{format} is a symbol that names the type of the
image. Valid values are @code{:png}, @code{:jpg}, @code{:jpeg},
@code{tiff}, @code{tif}, @code{gif}, @code{pbm}, @code{pgm}, and
@code{ppm}. Its default value is @code{:png}.
@end defmac

@defmac {clime:with-output-to-rgba-pattern}
An image describing the output to the @code{stream-var} stream will be
returned as an rgba pattern (of class @code{clime:image-pattern}).
@end defmac

@node Text Formatting
@section Text Formatting

@subsection Margins

Extended output streams in CLIM 2.0 specification allow only
specifying text right margin. Left margin may be simulated with an
@code{indenting-output} macro and top margin with setting cursor
position before doing the output. Bottom margin is always assumed to
be the viewport bottom.

Each margin may have either an absolute or a relative
position. Absolute position is specified in sheet native coordinates
and relative one is specified as a distance from the corresponding
edge towards the sheet center (i.e bottom margin relative position 30
means 30 units above bottom edge of the viewport while bottom marigin
absolute position 330 means margin positioned at y = 330 units).

Initargs and accessors for the margin configuration follow the
convention: @emph{side}@code{-margin} specifies the relative position
and @code{margin-}@emph{edge} specifies the absolute position. For
instance for the left margin @code{left-margin} is relative and
@code{margin-x1} is its absolute counterpart. For CLIM compatibility
@code{text-margin} if specified is the same thing as @code{margin-x2}.

When margin is set then its counterpart is nullfied (i.e if we set
@code{top-margin} then @code{margin-y2} is set to NIL. By default all
margins are set to a relative position 0 (on the viewport edges). To
see if the margin is relative or absolute it is enough to see if it is
not NIL. Initiargs for relative and absolute position are mutually
exclusive. Initargs should be supplied to either the stream initargs
or to @code{with-temporary-page} macro @code{margin-spec}.

@itemize
@item  @code{:left-margin}, @code{:margin-x1} --- left margin initargs.
@item  @code{:top-margin}, @code{:margin-y1} --- top margin initargs.
@item  @code{:right-margin}, @code{:margin-x2} (@code{:text-margin}) --- right margin initargs.
@item  @code{:bottom-margin}, @code{:margin-y2} --- bottom margin initargs.
@end itemize

@deffn {Reader} {clime:stream-text-margins} stream
Returns an object which implements the margin protocol described
below. Reader is defined for @code{standard-extended-output-stream}.
@end deffn

@deffn {Accessor} {clime:margin-x1} stream
@deffnx {Accessor} {clime:margin-y1} stream
@deffnx {Accessor} {clime:margin-x2} stream
@deffnx {Accessor} {clime:margin-y2} stream
Absolute margin position specification.
@end deffn

@deffn {Accessor} {clime:left-margin} stream
@deffnx {Accessor} {clime:top-margin} stream
@deffnx {Accessor} {clime:right-margin} stream
@deffnx {Accessor} {clime:bottom-margin} stream
Relative margin position specification. If the number is a ratio in
range (0;1), then it means that percentage of the viewport size is
used. For instance for left margin of size 1/3 and viewport of size
200 units left margin will be located at 67th unit.

Sometimes stream is associated with a sheet which doesn't have a
bounding rectangle (for instance @code{:eps} stream on PostScript
backend has sheet's region @code{+everywhere}). In such case margins
are relative to these arbitrary positions:

@itemize
@item left margin --- x = 0
@item top margin --- y = 0
@item right margin --- x = 80 * default-text-style-width
@item bottom margin --- y = 43 * default-text-style-height
@end itemize
@end deffn

@deffn {Function} {clime:stream-effective-left-margin} stream
@deffnx {Function} {clime:stream-effective-top-margin} stream
@deffnx {Function} {clime:stream-effective-right-margin} stream
@deffnx {Function} {clime:stream-effective-bottom-margin} stream
To probe the stream margin position in its native coordinates we call
a function @code{stream-effective-*-margin}. These functions always
return a number.
@end deffn

@deffn {Macro} {clime:with-temporary-page} (stream margin-spec &key move-cursor) &body body
Function temporarily auguments stream margins according to
@code{margin-spec} (margins which are not specified are inherited from
the current stream configuration). Macro changes cursor position to
the @code{page-cursor-initial-position}. If @code{move-cursor} is
@code{T} (default) cursor is left where it was at the end of the macro
scope. Otherwise old stream-cursor-position is reinstationed.
@end deffn

@subsection Line and page wrapping

Word wrapping in CLIM 2.0 can be achieved with @code{filling-output}
macro. McCLIM in addition to that supports @code{:end-of-line-action}
called @code{:wrap*}. It breaks lines by a word when the string width
exceeds line length between left and right margins.

Both @code{indenting-output} and @code{filling-output} are implemented
in terms of the @code{with-temporary-page} macro. Former temporarily
auguments the left margin while the latter does the same for the right
one. @code{filling-output} has a behavior extending what is defined in
CLIM 2.0.

@deffn {Macro} {clim:filling-output} stream &key fill-width breah-characters after-line-break after-line-break-initially after-line-break-subsequent

Macro behaves as specified in CLIM 2.0 specification. Additionally
@code{after-line-break} may be a function accepting two arguments:
stream and a boolean indicating whenever line was broken by a hard
break or a soft newline due to word wrap. String is printed (or
function is executed) with the same ink and text-style as was set on
the stream when @code{filling-output} scope has started.

If @code{after-line-break-initially} is @code{T}
@code{after-line-break} is triggered on each ``hard''
newline. Otherwise it is not.

If @code{after-line-break-subsequent} is @code{T} (default)
@code{after-line-break} is triggered on each ``soft''
newline. Otherwise it is not.
@end deffn

In the following example we print all lines in @code{*lorem-ipsum*}
with line numbers before each line. If it is a genuine new line in the
string line number is printed in italic red, otherwise it is printed
in italic blue. Lines are printed using @code{*default-text-style*}
and a black ink. Line is wrapped by word between x=20 (left margin)
and x=400 (right margin).

@lisp
(with-drawing-options
  (stream :text-style (make-text-style :fix :italic :normal)
          :ink +dark-blue+)
  (indenting-output (stream 20)
    (fresh-line stream)
    (filling-output
      (stream :fill-width 400
              :break-characters '(#\space)
              :after-line-break
              (let ((counter 0))
                (lambda (stream soft-newline-p)
                  (if soft-newline-p
                      (with-drawing-options (stream :ink +dark-red+)
                        (format stream "~4,'0d: " counter))
                      (format stream "~4,'0d: " counter))
                  (incf counter)))
              :after-line-break-initially t)
      (with-drawing-options (stream :text-style *default-text-style*
                                    :ink +black+)
        (format stream *lorem-ipsum*)))))
@end lisp

Page wrapping doesn't have yet any useful interpretation. To avoid any
confusion where page starts two functions are provided which return
page cursor initial position and its final position.

@deffn {Function} {ext:page-cursor-initial-position} stream
@deffnx {Function} {ext:page-cursor-final-position} stream
Each function returns two values: x and y coordinate of the initial /
final cursor position. This is useful for line and page wrapping where
these values are reset.

For left-to-right top-to-bottom text the initial position is at the
effective left top margin and the final position is at the effective
right bottom margin.
@end deffn
