@node Developer manual
@chapter Developer manual

@menu
* Writing backends::
* PostScript Backend::
* Raster Image backend::
@end menu

@node Writing backends
@section Writing backends

@menu
* Different types of backends::
* Backend protocol::
* Event handling::
* Graft protocol::
* Medium drawing::
* Medium operations::
* Port protocol::
* Frame manager::
* Pointer protocol (events?)::
* Text size::
* Text selection::
* Miscellaneous::
* Obsolete::
@end menu

@node Different types of backends
@subsection Different types of backends

Backend provides platform specific API for low level drawing
operations, getting events, managing window geometry properties and
providing native look-and-feel to the application.

There are three types of backends:

@table @asis
@item Draw-only backend

This type doesn't implement any kind of events and allows only drawing
on it. A good example of it is the @xref{PostScript Backend} which is
part of @emph{CLIM II} specification.

@item Basic backend

OpenGL, X, or HTML 5 canvas are resources which provide only drawing
and event handling primitives. In this case we need to wrap their APIs
for McCLIM to use. McCLIM will then use these drawing and windowing
primitives to implement portable widgets.

@item Native backend

Native backend is based on already complete GUI library which provides
a rich set of widgets (for example Cocoa or Win32 API). Additionally
to the things needed to be implement in the first two cases, we can
also map these native look and feel widgets in McCLIM.
@end table

The @code{clim-null} backend can be used as a template to start with a
new backend. If the underlying library you write backend for manages
window hierarchy, positioning and events, it is possible to base new
pane types on
@code{clim-standard:standard-full-mirrored-sheet-mixin}. Otherwise
@code{clim-standard:standard-single-mirrored-sheet-mixin} provides
calculation to support that hierarchy in Lisp side.

@node Backend protocol
@subheading Backend protocol

@node Event handling
@subheading Event handling

@node Graft protocol
@subheading Graft protocol

@node Medium drawing
@subheading Medium drawing

@node Medium operations
@subheading Medium operations

@node Port protocol
@subheading Port protocol

@node Frame manager
@subheading Frame manager, panes and gadgets

@node Pointer protocol (events?)
@subheading Pointer protocol (events?)

@node Text size
@subheading Text size

@node Text selection
@subheading Text selection

@node Miscellaneous
@subheading Miscellaneous

@node Obsolete
@subheading Obsolete

@node PostScript Backend
@section PostScript Backend

@menu
* Postscript Fonts::
* Additional functions::
@end menu

@node Postscript Fonts
@subsection Postscript Fonts

Font mapping is a cons, the car of which is the name of the font
(FontName field in the AFM file), and the cdr is the size in points.
Before establishing the mapping, an information about this font should
be loaded with the function @cl{load-afm-file}.

@node Additional functions
@subsection Additional functions

Package @cl{clim-postscript} exports the following functions:

@deffn {Function} {load-afm-file} afm-filename
@end deffn

Loads a description of a font from the specified AFM file.

@node Raster Image backend
@section Raster Image backend

Raster image backend includes a medium that implements:
@itemize @bullet
@item CLIM's medium protocol, 
@item CLIM's output stream protocol, and
@item CLIM's Pixmap protocol.
@end itemize

Package @code{mcclim-raster-image} exports the following macros:

@anchor{Macro mcclim-render:with-output-to-raster-image-stream}
@deffn {Macro} {mcclim-render:with-output-to-raster-image-stream} (stream-var file-stream format &rest options) &body body
@findex mcclim-render:with-output-to-raster-image-stream
@end deffn

@anchor{Macro mcclim-render:with-output-to-rgb-pattern}
@deffn {Macro} {mcclim-render:with-output-to-rgb-pattern} (stream-var image &rest options) &body body
@findex mcclim-render:with-output-to-rgb-pattern
@end deffn

Within @code{body}, @code{stream-var} is bound to a stream that produces
a raster image.  This stream is suitable as a stream or medium argument
to any CLIM output utility, such as @code{draw-line*} or
@code{write-string}.

The value of @code{options} is a list consisting of alternating keyword and value
pairs.  These are the supported keywords:
@itemize @bullet
@item
  @code{:width} --- specifies the width of the image. Its default value is 1000.
@item
  @code{:height} --- specifies the height of the image. Its default value is 1000. 
@end itemize

@defmac {mcclim-render:with-output-to-raster-image-stream}

An image describing the output to the @code{stream-var} stream will be
written to the stream @code{file-stream} using the format
@code{format}. @code{format} is a symbol that names the type of the
image. Valid values are @code{:png}, @code{:jpg}, @code{:jpeg},
@code{tiff}, @code{tif}, @code{gif}, @code{pbm}, @code{pgm}, and
@code{ppm}. Its default value is @code{:png}.
@end defmac

@defmac {mcclim-render:with-output-to-rgb-pattern}

An image describing the output to the @code{stream-var} stream will be
returned as an rgb-pattern (of class @code{climi::rgb-pattern}).
@end defmac

-- 
To run an example:

@lisp
(ql:quickload :clim-examples)
(load "Examples/drawing-tests")
(clim-demo::run-drawing-tests)
@end lisp
