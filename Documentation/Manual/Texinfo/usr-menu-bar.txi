@node Using menu bar
@chapter Using menu bar

@cindex menu bar

@menu
* Creating Menu bar::
* Modifying Menu bar::
@end menu

Menu bar has become essential part of every GUI system, including
McClim. Ideally, McClim should try to use the menu bar provided by
host window system via McClim backends, but the current
@t{clx-backend} doesn't supports native menu bars. That's why It has
some quirks of its own, like you need to keep mouse button pressed
while accessing the sub-menus.

@node Creating Menu bar
@section Creating Menu bar

McCLIM makes creating menu bar quite easy.

@lisp
(clim:define-application-frame foo ()
  ;; ...
  (:menu-bar t)
  ;; ...
  )
@end lisp

The only argument for @t{:menu-bar} can be:
@table @samp
@item T (default)
McCLIM will provide the menu bar. Later, when you start defining
commands, you can provide a @t{(:menu t)} argument to command
definition that will add this command to menu bar.

@item NIL
McCLIM won't provide the menu bar.

@item command-table
If you provide a named command table as argument, that command table
is used to provide the menu bar (@xref{Using command tables}).
@end table

@cindex Adding sub-menu to menu bar

To add a sub-menu to menu bar, you need to change the type of
menu-item from @t{:command} to @t{:menu} (which requires another
@t{command-table} as argument) what is described in the next section.

@node Modifying Menu bar
@section Modifying Menu bar

Menu bar can be changed anytime by changing @t{command-table}
associated with the current @t{frame}.

@lisp
(setf (frame-command-table *application-frame*)
      new-command-table)
@end lisp

Example above changes menu bar of @t{*application-frame*} by replacing
current @t{command-table} (accessible with @t{frame-command-table}
function) with @t{new-command-table}.

@subheading Modifying menu items of command table

@include fun-clim-add-menu-item-to-command-table.texi

Function arguments:
@table @samp

@item command-table
Command table to which we want to add the menu item.

@item string
Name of the menu item as it will appear on the menu bar. Its character
case is ignored e.g. you may give it @t{file} or @t{FILE} but it will
appear as @t{File}.

@item type and value
type can be one of @t{:command}, @t{:function}, @t{:menu} and
@t{:divider}. Value of @t{value} depends on @t{type}:

@table @samp
@item :command
@t{value} must be a command or a cons of command name and it's
arguments. If you omit the arguments McCLIM will prompt for them.

@item :function
@t{value} must be a function having indefinite extent that, when
called, returns a command. Function must accept two arguments, the
gesture (keyboard or mouse press event) and a @t{numeric argument}.

@item :menu
@t{value} must be another command table. This type is used to add
sub-menus to the menu.

@item :divider
@t{value} is ignored and @t{string} is used as a divider string. Using
@t{|} as string will make it obvious to users that it is a divider.
@end table

@item documentation
You can provide the documentation (for non-obvious menu items) which
will be displayed on pointer-documentation pane (if you have one).

@item after (default @t{:end})
This determines where item will be inserted in the menu. The default
is to add it to the end. Other values could be @t{:start}, @t{:sort}
(add in alphabetical order) or @t{string} which is name of existing
menu-item to add after it.

@item keystroke
If keystroke is supplied, it will be added to comand tables keystroke
accelerator table. Value must be a keyboard gesture name
e.g. @code{(:s :control)} for @t{Control + s}.

@item text-style
Either a text style spec or @t{NIL}. It is used to indicate that the
command menu item should be drawn with the supplied text style in
command menus.

@item error-p
If @t{T}, adding the existing item to the menu will signal error. If
@t{NIL}, it will overwrite the existing item in the command table.
@end table

To remove items from command table, following function is used:

@include fun-clim-remove-menu-item-from-command-table.texi

Where @t{command-table} is command-table-designator and @t{string} is
menu item's name (it is case-insensitive). You can provide
@code{:error-p nil} to suppress the error if item is not in the
command-table.

Note that both of above functions @emph{does not} automatically update
the menu bar. For that you need to replace existing
@t{frame-command-table} with modified command table using
@t{setf}. One way to do this is use @t{let} to create the copy of
@t{frame-command-table}, modify it and at the end call @t{setf} to
replace the original.
