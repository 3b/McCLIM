@node Using views
@chapter Using views
@cindex view

The CLIM specification mentions a concept called a @emph{view}, and also
lists a number of predefined views to be used in various different
contexts.

In this chapter we show how the @emph{view} concept can be used in some
concrete programming examples.  In particular, we show how to use a
single pane to show different views of the application data structure at
different times.  To switch between the different views, we supply a set
of commands that alter the @t{stream-default-view} feature of all CLIM
extended output streams.

The example shown here has been stripped to a bare minimum in order to
illustrate the important concepts.  A more complete version can be found
in @t{Examples/views.lisp} in the McCLIM source tree.

Here is the example:

@lisp
@include views.lisp
@end lisp

The example shows a stripped-down example of a simple database of
members of some organization.

The main trick used in this example is the @t{display-main-pane}
function that is declared to be the display function of the main pane in
the application frame.  The @t{display-main-pane} function trampolines
to a generic function called @t{display-pane-with-view}, and which takes
an additional argument compared to the display functions of CLIM panes.
This additional argument is of type @t{view} which allows us to dispatch
not only on the type of frame and the type of pane, but also on the type
of the current default view.  In this example the view argument is
simply taken from the default view of the pane.

A possibility that is not obvious from reading the CLIM specification is
to have views that contain additional slots.  Our example defines two
subclasses of the CLIM @t{view} class, namely @t{members-view} and
@t{person-view}.

The first one of these does not contain any additional slots, and is
used when a global view of the members of our organization is wanted.
Since no instance-specific data is required in this view, we follow the
idea of the examples of the CLIM specification to instantiate a
singleton of this class and store that singleton in the
@t{stream-default-view} of our main pane whenever a global view of our
organization is required.

The @t{person-view} class, on the other hand, is used when we want a
closer view of a single member of the organization.  This class
therefore contains an additional slot which holds the particular person
instance we are interested in.  The method on @t{display-pane-with-view}
that specializes on @t{person-view} displays the data of the particular
person that is contained in the view.

To switch between the views, we provide two commands.  The command
@t{com-show-all} simply changes the default view of the main pane to be
the singleton instance of the @t{members-view} class.  The command
@t{com-show-person} is more complicated.  It takes an argument of type
person, creates an instance of the @t{person-view} class initialized
with the person that was passed as an argument, and stores the instance
as the default view of the main pane.
